{"version":3,"sources":["resize-image-input/index.tsx","qr-scanner/index.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["ResizeImageInput","label","maxWidth","maxHeight","onChange","useState","image","setImage","className","alt","src","onClick","input","document","createElement","type","accept","onchange","event","fr","FileReader","onload","readImageByteString","result","toString","imageResizeCanvas","imageResizeCanvasContext","getContext","imageObjectToBeDrawnOnCanvas","Image","imageWidth","imageHeight","xScale","width","yScale","height","drawImage","base64ImageString","toDataURL","target","files","readAsDataURL","click","Scanner","scanVideoStreamForQRCodeTimeoutId","canvas","canvasCtx","videoRef","React","useRef","video","setVideo","code","setCode","showScanImageButton","setShowScanImageButton","scanImageForQRCode","imageSource","imageData","getImageData","jsQR","data","inversionAttempts","setTimeout","error","RangeError","scanVideoStreamForQRCode","readyState","HAVE_ENOUGH_DATA","videoHeight","videoWidth","useEffect","mediaStream","current","navigator","mediaDevices","getUserMedia","facingMode","then","stream","getVideoTracks","track","capabilities","getCapabilities","zoom","applyConstraints","advanced","min","srcObject","setAttribute","play","getTracks","forEach","t","stop","clearTimeout","base64EncodedImage","img","alert","ref","QRScanner","showQRScanner","setShowQRScanner","App","value","setValue","href","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","Sentry","dsn","integrations","Integrations","BrowserTracing","tracesSampleRate","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.7181b470.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport \"./index.css\";\n\n\ntype ImageInputProps = {\n  label: string\n  onChange: (value: string) => void\n  maxWidth?: number\n  maxHeight?: number\n}\n\nexport const ResizeImageInput = ({\n  label,\n  maxWidth = 1920,\n  maxHeight = 1080,\n  onChange\n}: ImageInputProps): JSX.Element => {\n  const [image, setImage] = useState(\"\")\n\n  const uploadImage = (): void => {\n    const input = document.createElement(\"input\")\n    input.type = \"file\"\n    input.accept = \"image/*\"\n\n    input.onchange = (event: Event) => {\n      /* Use file reader to read image from client*/\n      const fr = new FileReader()\n\n      /* When the image is loaded, transform and resize it*/\n      fr.onload = () => {\n        /* Get the result of the loaded image */\n        const readImageByteString = fr.result?.toString() || \"\"\n\n        /* Create a canvas to resize the image to preferred size */\n        const imageResizeCanvas = document.createElement(\"canvas\")\n\n        const imageResizeCanvasContext = imageResizeCanvas.getContext(\"2d\")\n\n        if (imageResizeCanvasContext) {\n          /* Create an image object that can be drawn on a canvas */\n          const imageObjectToBeDrawnOnCanvas = new Image()\n\n          /* Wait til image has been loaded before trying to draw it on canvas */\n          imageObjectToBeDrawnOnCanvas.onload = () => {\n            /* Calculate image height and width */\n            let imageWidth = maxWidth;\n            let imageHeight = maxHeight;\n            const xScale = maxWidth / imageObjectToBeDrawnOnCanvas.width\n            const yScale = maxHeight / imageObjectToBeDrawnOnCanvas.height\n            if (xScale > yScale) {\n              imageHeight = imageObjectToBeDrawnOnCanvas.height * xScale\n            } else {\n              imageWidth = imageObjectToBeDrawnOnCanvas.width * yScale\n            }\n\n            /* Draw the image scaled down */\n            imageResizeCanvas.width = imageWidth\n            imageResizeCanvas.height = imageHeight\n            imageResizeCanvasContext.drawImage(imageObjectToBeDrawnOnCanvas, 0, 0, imageWidth, imageHeight)\n\n            const base64ImageString = imageResizeCanvas.toDataURL()\n            setImage(base64ImageString)\n            onChange(base64ImageString)\n          }\n\n          imageObjectToBeDrawnOnCanvas.src = readImageByteString\n        }\n      }\n      if (event && event.target) {\n        const target = event.target as HTMLInputElement\n        if (target.files) {\n          fr.readAsDataURL(target.files[0])\n        }\n      }\n\n      /* TODO split into multiple functions for better readability */\n    }\n\n    input.click()\n  }\n\n  return     (<div className=\"input-image\">\n      {image && <img alt=\"Uploaded image\" className=\"input-image--image\" src={image} />}\n\n      <button onClick={uploadImage}>{label}</button>\n    </div>)\n  \n}","import jsQR from \"jsqr\";\nimport React, { useState } from \"react\";\nimport { ResizeImageInput } from \"../resize-image-input\";\nimport \"./index.css\";\n\n/*\nBased on https://github.com/cozmo/jsQR/blob/master/docs/index.html \nand https://betterprogramming.pub/add-an-html-canvas-into-your-react-app-176dab099a79\nZoom from: https://developer.mozilla.org/en-US/docs/Web/API/MediaStream_Image_Capture_API\n*/\n\ntype ScannerProps = {\n  onChange: (code: string) => void;\n};\n\nconst Scanner = ({ onChange }: ScannerProps): JSX.Element => {\n  const canvas = document.createElement(\"canvas\");\n  const canvasCtx = canvas.getContext(\"2d\");\n\n  const videoRef = React.useRef<HTMLVideoElement>(null);\n  const [video, setVideo] = useState<HTMLVideoElement | null>(null);\n  const [code, setCode] = useState(\"\")\n  const [showScanImageButton, setShowScanImageButton] = useState(true);\n  let scanVideoStreamForQRCodeTimeoutId: NodeJS.Timeout;\n\n\n  const scanImageForQRCode = (\n    imageSource: CanvasImageSource,\n    width: number,\n    height: number\n  ): boolean => {\n    if (canvasCtx) {\n      canvas.height = height;\n      canvas.width = width;\n\n      canvasCtx.drawImage(imageSource, 0, 0, width, height);\n      const imageData = canvasCtx.getImageData(0, 0, width, height);\n      try {\n        const code = jsQR(imageData.data, imageData.width, imageData.height, {\n          inversionAttempts: \"dontInvert\",\n        });\n        if (code) {\n          setCode(code.data);\n\n          setTimeout(() => {\n            onChange(code.data);\n          }, 1000);\n          return true;\n        }\n      } catch (error) {\n        if (error! instanceof RangeError) throw error;\n      }\n    }\n    return false;\n  };\n  \n\n  const scanVideoStreamForQRCode = (): void => {\n\n    if(code ){\n      return;\n    }\n    if (video && video.readyState === video.HAVE_ENOUGH_DATA) {\n      scanImageForQRCode(video, video.videoHeight, video.videoWidth);\n    }  \n    scanVideoStreamForQRCodeTimeoutId =  setTimeout(scanVideoStreamForQRCode, 200)\n  };\n\n  React.useEffect(() => {\n    let mediaStream: MediaStream;\n    if (videoRef.current) {\n      setVideo(videoRef.current);\n    }\n    if (video) {\n      navigator.mediaDevices\n        .getUserMedia({ video: { facingMode: \"environment\" } })\n        .then(function (stream) {\n          mediaStream = stream;\n\n          const [track] = mediaStream.getVideoTracks();\n          \n          const capabilities = track && track.getCapabilities && track.getCapabilities();\n\n          if (capabilities && capabilities.zoom) {\n         \n            track && track.applyConstraints({\n              advanced: [{ zoom: capabilities.zoom.min }],\n            });\n          }\n\n          video.srcObject = mediaStream;\n\n          // required to tell iOS safari we don't want fullscreen\n          video.setAttribute(\"playsinline\", \"true\");\n          video.play();\n          \n          scanVideoStreamForQRCodeTimeoutId = setTimeout(\n            scanVideoStreamForQRCode,\n            1000\n          );\n        }).then(() => {\n          setShowScanImageButton(false)\n        })\n    }\n    const cleanup = (): void => {\n      // release webcam when it is no longer needed\n      mediaStream?.getTracks().forEach((t) => {\n        t.stop();\n      });\n      clearTimeout( scanVideoStreamForQRCodeTimeoutId);\n    };\n    return cleanup;\n  }, [video]);\n\n  const getQRFromBase64String = (base64EncodedImage: string) : void =>{\n    const img = new Image()\n    img.onload = () => {\n      const foundQrCode = scanImageForQRCode(img, img.width, img.height);\n      if (!foundQrCode) {\n        alert(\"could not find QR code im uploaded image. Please try again\")\n      }\n    }\n    img.src = base64EncodedImage;\n  } \n\n  return (\n    <div className=\"scanner\">\n      {showScanImageButton && <ResizeImageInput label=\"Last opp bilde av QR code\" onChange={getQRFromBase64String} maxWidth={640} maxHeight={480} />}\n      <video className=\"scanner__video\" ref={videoRef}></video>\n      <div className=\"scanner__code\">{code}</div>\n      <button onClick={() => onChange(\"\")}>Avbryt</button>\n    </div>\n  );\n};\n\ntype QRScannerProps = {\n  onChange: (code: string) => void;\n  label: string;\n};\nexport const QRScanner = ({ onChange, label }: QRScannerProps): JSX.Element => {\n  const [showQRScanner, setShowQRScanner] = useState(false);\n\n  return (\n    <div className=\"qr-scanner\">\n      <button onClick={() => setShowQRScanner(true)}>{label}</button>\n      {showQRScanner ? (\n        <Scanner\n          onChange={(code) => {\n            onChange(code);\n            setShowQRScanner(false);\n          }}\n        />\n      ) : null}\n    </div>\n  );\n};\n","import React, { useState } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport { QRScanner } from './qr-scanner';\n\nfunction App() {\n  const [value, setValue] = useState(\"\")\n   return (\n     <div className=\"App\">\n       <a href={value}>{value}</a>\n       \n       <QRScanner onChange={setValue} label=\"scan qr\" />\n     </div>\n   );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport * as Sentry from \"@sentry/react\";\nimport { Integrations } from \"@sentry/tracing\";\n\nSentry.init({\n  dsn:\n    \"https://175cda1b995144fca72721c4adf324bb@o556988.ingest.sentry.io/5688577\",\n  integrations: [new Integrations.BrowserTracing()],\n\n  // Set tracesSampleRate to 1.0 to capture 100%\n  // of transactions for performance monitoring.\n  // We recommend adjusting this value in production\n  tracesSampleRate: 1.0,\n});\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}