{"version":3,"sources":["qr-scanner/index.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Scanner","onChange","canvas","document","createElement","canvasCtx","getContext","videoRef","React","useRef","useState","video","setVideo","code","setCode","scanVideoStreamForQRCode","readyState","HAVE_ENOUGH_DATA","height","videoHeight","width","videoWidth","drawImage","imageData","getImageData","jsQR","data","inversionAttempts","setTimeout","error","RangeError","useEffect","mediaStream","current","navigator","mediaDevices","getUserMedia","facingMode","then","stream","getVideoTracks","track","capabilities","getCapabilities","zoom","c","advanced","min","applyConstraints","srcObject","setAttribute","play","getTracks","forEach","t","stop","className","ref","onClick","QRScanner","label","showQRScanner","setShowQRScanner","App","value","setValue","href","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","Sentry","dsn","integrations","Integrations","BrowserTracing","tracesSampleRate","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.0610413a.chunk.js","sourcesContent":["import jsQR from \"jsqr\";\nimport React, { useState } from \"react\";\nimport ts from \"typescript\";\nimport \"./index.css\";\n\n/*\nBased on https://github.com/cozmo/jsQR/blob/master/docs/index.html \nand https://betterprogramming.pub/add-an-html-canvas-into-your-react-app-176dab099a79\n*/\n\ntype ScannerProps = {\n  onChange: (code: string) => void;\n};\n\nconst Scanner = ({ onChange }: ScannerProps): JSX.Element => {\n  const canvas = document.createElement(\"canvas\");\n  const canvasCtx = canvas.getContext(\"2d\");\n\n  const videoRef = React.useRef<HTMLVideoElement>(null);\n  const [video, setVideo] = useState<HTMLVideoElement | null>(null);\n  const [code, setCode] = useState(\"\")\n\n  const scanVideoStreamForQRCode = (): void => {\n    if (canvasCtx && video && video.readyState === video.HAVE_ENOUGH_DATA) {\n      canvas.height = video.videoHeight;\n      canvas.width = video.videoWidth;\n\n      canvasCtx.drawImage(video, 0, 0, video.videoHeight, video.videoWidth);\n      const imageData = canvasCtx.getImageData(\n        0,\n        0,\n        video.videoHeight,\n        video.videoWidth\n      );\n      try {\n        const code = jsQR(imageData.data, imageData.width, imageData.height, {\n          inversionAttempts: \"dontInvert\",\n        });\n        if (code) {\n            setCode(code.data);\n\n          setTimeout(() => {\n            onChange(code.data);\n\n          },1000)\n          return;\n        }\n      } catch (error) {\n        if (error! instanceof RangeError) throw error;\n      }\n    }\n    setTimeout(scanVideoStreamForQRCode, 200);\n  };\n\n  React.useEffect(() => {\n    let mediaStream: MediaStream;\n    if (videoRef.current) {\n      setVideo(videoRef.current);\n    }\n    if (video) {\n      navigator.mediaDevices\n        .getUserMedia({ video: { facingMode: \"environment\" } })\n        .then(function (stream) {\n          mediaStream = stream;\n          const [track] = mediaStream.getVideoTracks();\n\n          const capabilities = track.getCapabilities();\n          // TODO - fix type declarations\n          //@ts-ignore\n          if (capabilities.zoom) {\n            //@ts-ignore\n            const zoom = { zoom: capabilities.zoom.min };\n            const c = {\n              advanced: [ zoom ],\n            };\n            //@ts-ignore\n            track.applyConstraints(c);\n          }\n\n          video.srcObject = mediaStream;\n          video.setAttribute(\"playsinline\", \"true\"); // required to tell iOS safari we don't want fullscreen\n          video.play();\n          setTimeout(scanVideoStreamForQRCode, 1000);\n        });\n    }\n    const cleanup = (): void => {\n      // release webcam when it is no longer needed\n      mediaStream?.getTracks().forEach((t) => {\n        t.stop();\n      });\n    };\n    return cleanup;\n  }, [video]);\n\n  return (\n    <div className=\"scanner\">\n      <video className=\"scanner__video\" ref={videoRef}></video>\n      <div className=\"scanner_code\">{code}</div>\n        <button onClick={() => onChange(\"\")}>Avbryt</button>\n    </div>\n  );\n};\n\ntype QRScannerProps = {\n  onChange: (code: string) => void;\n  label: string;\n};\nexport const QRScanner = ({ onChange, label }: QRScannerProps): JSX.Element => {\n  const [showQRScanner, setShowQRScanner] = useState(false);\n\n  return (\n    <div className=\"qr-scanner\">\n      <button onClick={() => setShowQRScanner(true)}>{label}</button>\n      {showQRScanner ? (\n        <Scanner\n          onChange={(code) => {\n            onChange(code);\n            setShowQRScanner(false);\n          }}\n        />\n      ) : null}\n    </div>\n  );\n};\n","import React, { useState } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport { QRScanner } from './qr-scanner';\n\nfunction App() {\n  const [value, setValue] = useState(\"\")\n   return (\n     <div className=\"App\">\n       <a href={value}>{value}</a>\n       \n       <QRScanner onChange={setValue} label=\"scan qr\" />\n     </div>\n   );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport * as Sentry from \"@sentry/react\";\nimport { Integrations } from \"@sentry/tracing\";\n\nSentry.init({\n  dsn:\n    \"https://175cda1b995144fca72721c4adf324bb@o556988.ingest.sentry.io/5688577\",\n  integrations: [new Integrations.BrowserTracing()],\n\n  // Set tracesSampleRate to 1.0 to capture 100%\n  // of transactions for performance monitoring.\n  // We recommend adjusting this value in production\n  tracesSampleRate: 1.0,\n});\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}