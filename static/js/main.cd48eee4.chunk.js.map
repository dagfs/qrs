{"version":3,"sources":["qr-scanner/index.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Scanner","onChange","video","document","createElement","canvasRef","React","useRef","useState","context","setContext","tick","current","readyState","HAVE_ENOUGH_DATA","height","videoHeight","width","videoWidth","drawImage","imageData","getImageData","code","jsQR","data","inversionAttempts","requestAnimationFrame","useEffect","renderCtx","getContext","console","log","navigator","mediaDevices","getUserMedia","facingMode","then","stream","srcObject","setAttribute","play","className","ref","QRScanner","label","showQRScanner","setShowQRScanner","onClick","App","value","setValue","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"0PAcMA,EAAU,SAAC,GAA6C,IAA3CC,EAA0C,EAA1CA,SACXC,EAAQC,SAASC,cAAc,SAE/BC,EAAYC,IAAMC,OAA0B,MAHS,EAK7BD,IAAME,SAA0C,MALnB,mBAKpDC,EALoD,KAK3CC,EAL2C,KAOrDC,EAAO,SAAPA,IACJ,GAAIN,EAAUO,SAAWH,GAAWP,EAAMW,aAAeX,EAAMY,iBAAkB,CAC/ET,EAAUO,QAAQG,OAASb,EAAMc,YACjCX,EAAUO,QAAQK,MAAQf,EAAMgB,WAEhCT,EAAQU,UAAUjB,EAAO,EAAG,EAAGA,EAAMc,YAAad,EAAMgB,YACxD,IAAME,EAAYX,EAAQY,aAAa,EAAG,EAAGnB,EAAMc,YAAad,EAAMgB,YAChEI,EAAOC,IAAKH,EAAUI,KAAMJ,EAAUH,MAAOG,EAAUL,OAAQ,CACnEU,kBAAmB,eAErB,GAAIH,EAEF,YADArB,EAASqB,EAAKE,MAIlBE,sBAAsBf,IAwBxB,OArBAL,IAAMqB,WAAU,WACd,GAAItB,EAAUO,QAAS,CACrB,IAAMgB,EAAYvB,EAAUO,QAAQiB,WAAW,MAE3CD,GACFlB,EAAWkB,GAGXnB,IAEFqB,QAAQC,IAAIC,WACZF,QAAQC,IAAIC,UAAUC,cACtBD,UAAUC,aAAaC,aAAa,CAAEhC,MAAO,CAAEiC,WAAY,iBAAmBC,MAAK,SAAUC,GAC3FnC,EAAMoC,UAAYD,EAClBnC,EAAMqC,aAAa,cAAe,QAClCrC,EAAMsC,OACNd,sBAAsBf,SAGzB,CAACF,IAGF,qBAAKgC,UAAU,UAAf,SACE,wBAAQA,UAAU,kBAAkBC,IAAKrC,OASlCsC,EAAY,SAAC,GAAsD,IAApD1C,EAAmD,EAAnDA,SAAU2C,EAAyC,EAAzCA,MAAyC,EACnCpC,oBAAS,GAD0B,mBACtEqC,EADsE,KACvDC,EADuD,KAG7E,OACE,sBAAKL,UAAU,aAAf,UACE,wBAAQM,QAAS,kBAAMD,GAAiB,IAAxC,SAAgDF,IAC/CC,EACC,cAAC,EAAD,CACE5C,SAAU,SAACqB,GACTrB,EAASqB,GACTwB,GAAiB,MAGnB,SCrEKE,MAVf,WAAgB,IAAD,EACaxC,mBAAS,IADtB,mBACNyC,EADM,KACCC,EADD,KAEZ,OACC,sBAAKT,UAAU,MAAf,UACE,8BAAMQ,IACN,cAAC,EAAD,CAAWhD,SAAUiD,EAAUN,MAAM,gBCI5BO,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBjB,MAAK,YAAkD,IAA/CkB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCHdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEF1D,SAAS2D,eAAe,SAM1BX,M","file":"static/js/main.cd48eee4.chunk.js","sourcesContent":["import jsQR from \"jsqr\"\nimport React, { useState } from \"react\"\nimport \"./index.css\"\n\n/*\nBased on https://github.com/cozmo/jsQR/blob/master/docs/index.html \nand https://betterprogramming.pub/add-an-html-canvas-into-your-react-app-176dab099a79\n\n*/\n\ntype ScannerProps = {\n  onChange: (code: string) => void\n}\n\nconst Scanner = ({ onChange }: ScannerProps): JSX.Element => {\n  const video = document.createElement(\"video\")\n\n  const canvasRef = React.useRef<HTMLCanvasElement>(null)\n\n  const [context, setContext] = React.useState<CanvasRenderingContext2D | null>(null)\n\n  const tick = (): void => {\n    if (canvasRef.current && context && video.readyState === video.HAVE_ENOUGH_DATA) {\n      canvasRef.current.height = video.videoHeight\n      canvasRef.current.width = video.videoWidth\n\n      context.drawImage(video, 0, 0, video.videoHeight, video.videoWidth)\n      const imageData = context.getImageData(0, 0, video.videoHeight, video.videoWidth)\n      const code = jsQR(imageData.data, imageData.width, imageData.height, {\n        inversionAttempts: \"dontInvert\"\n      })\n      if (code) {\n        onChange(code.data)\n        return\n      }\n    }\n    requestAnimationFrame(tick)\n  }\n\n  React.useEffect(() => {\n    if (canvasRef.current) {\n      const renderCtx = canvasRef.current.getContext(\"2d\")\n\n      if (renderCtx) {\n        setContext(renderCtx)\n      }\n    }\n    if (context) {\n      // Use facingMode: environment to attemt to get the front camera on phones\n      console.log(navigator)\n      console.log(navigator.mediaDevices)\n      navigator.mediaDevices.getUserMedia({ video: { facingMode: \"environment\" } }).then(function (stream) {\n        video.srcObject = stream\n        video.setAttribute(\"playsinline\", \"true\") // required to tell iOS safari we don't want fullscreen\n        video.play()\n        requestAnimationFrame(tick)\n      })\n    }\n  }, [context])\n\n  return (\n    <div className=\"scanner\">\n      <canvas className=\"scanner__canvas\" ref={canvasRef}></canvas>\n    </div>\n  )\n}\n\ntype QRScannerProps = {\n  onChange: (code: string) => void\n  label: string\n}\nexport const QRScanner = ({ onChange, label }: QRScannerProps): JSX.Element => {\n  const [showQRScanner, setShowQRScanner] = useState(false)\n\n  return (\n    <div className=\"qr-scanner\">\n      <button onClick={() => setShowQRScanner(true)}>{label}</button>\n      {showQRScanner ? (\n        <Scanner\n          onChange={(code) => {\n            onChange(code);\n            setShowQRScanner(false);\n          }}\n        />\n      ) : null}\n    </div>\n  );\n}\n","import React, { useState } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport { QRScanner } from './qr-scanner';\n\nfunction App() {\n  const [value, setValue] = useState(\"\")\n   return (\n    <div className=\"App\">\n      <div>{value}</div>\n      <QRScanner onChange={setValue} label=\"scan qr\"/>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}