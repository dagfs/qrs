{"version":3,"sources":["resize-image-input/index.tsx","qr-scanner/index.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["ResizeImageInput","label","maxWidth","maxHeight","onChange","showImage","buttonClassName","useState","image","setImage","className","src","onClick","input","document","createElement","type","accept","onchange","event","fr","FileReader","onload","readImageByteString","result","toString","imageResizeCanvas","imageResizeCanvasContext","getContext","imageObjectToBeDrawnOnCanvas","Image","imageWidth","imageHeight","xScale","width","yScale","height","drawImage","base64ImageString","toDataURL","target","files","readAsDataURL","click","Scanner","scanVideoStreamForQRCodeTimeoutId","canvas","canvasCtx","videoRef","React","useRef","video","setVideo","code","setCode","showScanImageButton","setShowScanImageButton","error","setError","img","setImg","scanImageForQRCode","imageSource","imageData","getImageData","jsQR","data","inversionAttempts","RangeError","scanVideoStreamForQRCode","readyState","HAVE_ENOUGH_DATA","videoHeight","videoWidth","setTimeout","useEffect","mediaStream","current","navigator","mediaDevices","getUserMedia","facingMode","then","stream","getVideoTracks","track","capabilities","getCapabilities","zoom","applyConstraints","advanced","min","srcObject","setAttribute","play","getTracks","forEach","t","stop","clearTimeout","ref","alt","id","base64EncodedImage","QRScanner","showQRScanner","setShowQRScanner","App","value","setValue","href","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","Sentry","dsn","integrations","Integrations","BrowserTracing","tracesSampleRate","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.8fc5a85c.chunk.js","sourcesContent":["import React, { useState } from \"react\";\n\ntype ImageInputProps = {\n  label: string;\n  onChange: (value: string) => void;\n  maxWidth?: number;\n  maxHeight?: number;\n  showImage?: boolean;\n  buttonClassName?: string;\n};\n\nexport const ResizeImageInput = ({\n  label,\n  maxWidth = 1920,\n  maxHeight = 1080,\n  onChange,\n  showImage = true,\n  buttonClassName = \"\",\n}: ImageInputProps): JSX.Element => {\n  const [image, setImage] = useState(\"\");\n\n  const uploadImage = (): void => {\n    const input = document.createElement(\"input\");\n    input.type = \"file\";\n    input.accept = \"image/*\";\n\n    input.onchange = (event: Event) => {\n      /* Use file reader to read image from client*/\n      const fr = new FileReader();\n\n      /* When the image is loaded, transform and resize it*/\n      fr.onload = () => {\n        /* Get the result of the loaded image */\n        const readImageByteString = fr.result?.toString() || \"\";\n\n        /* Create a canvas to resize the image to preferred size */\n        const imageResizeCanvas = document.createElement(\"canvas\");\n\n        const imageResizeCanvasContext = imageResizeCanvas.getContext(\"2d\");\n\n        if (imageResizeCanvasContext) {\n          /* Create an image object that can be drawn on a canvas */\n          const imageObjectToBeDrawnOnCanvas = new Image();\n\n          /* Wait til image has been loaded before trying to draw it on canvas */\n          imageObjectToBeDrawnOnCanvas.onload = () => {\n            /* Calculate image height and width */\n            let imageWidth = maxWidth;\n            let imageHeight = maxHeight;\n            const xScale = maxWidth / imageObjectToBeDrawnOnCanvas.width;\n            const yScale = maxHeight / imageObjectToBeDrawnOnCanvas.height;\n            if (xScale > yScale) {\n              imageHeight = imageObjectToBeDrawnOnCanvas.height * xScale;\n            } else {\n              imageWidth = imageObjectToBeDrawnOnCanvas.width * yScale;\n            }\n\n            /* Draw the image scaled down */\n            imageResizeCanvas.width = imageWidth;\n            imageResizeCanvas.height = imageHeight;\n            imageResizeCanvasContext.drawImage(\n              imageObjectToBeDrawnOnCanvas,\n              0,\n              0,\n              imageWidth,\n              imageHeight\n            );\n\n            const base64ImageString = imageResizeCanvas.toDataURL();\n            setImage(base64ImageString);\n            onChange(base64ImageString);\n          };\n\n          imageObjectToBeDrawnOnCanvas.src = readImageByteString;\n        }\n      };\n      if (event && event.target) {\n        const target = event.target as HTMLInputElement;\n        if (target.files) {\n          fr.readAsDataURL(target.files[0]);\n        }\n      }\n\n      /* TODO split into multiple functions for better readability */\n    };\n\n    input.click();\n  };\n\n  return (\n    <div className=\"input-image\">\n      {showImage && <img className=\"input-image--image\" src={image} />}\n        <button className={buttonClassName} onClick={uploadImage}>\n          {label}\n        </button>\n    </div>\n  );\n};\n","\nimport jsQR from \"jsqr\";\nimport React, { useState } from \"react\";\nimport { ResizeImageInput } from \"../resize-image-input\";\nimport \"./index.css\";\n\n/*\nBased on https://github.com/cozmo/jsQR/blob/master/docs/index.html \nand https://betterprogramming.pub/add-an-html-canvas-into-your-react-app-176dab099a79\nZoom from: https://developer.mozilla.org/en-US/docs/Web/API/MediaStream_Image_Capture_API\n\n*/\n\ntype ScannerProps = {\n  onChange: (code: string) => void;\n};\n\nconst Scanner = ({ onChange }: ScannerProps): JSX.Element => {\n  const canvas = document.createElement(\"canvas\");\n  const canvasCtx = canvas.getContext(\"2d\");\n\n  const videoRef = React.useRef<HTMLVideoElement>(null);\n  const [video, setVideo] = useState<HTMLVideoElement | null>(null);\n  const [code, setCode] = useState(\"\");\n  const [showScanImageButton, setShowScanImageButton] = useState(true);\n  const [error, setError] = useState(\"\");\n  const [img, setImg] = useState(\"\");\n  let scanVideoStreamForQRCodeTimeoutId: NodeJS.Timeout;\n\n  const scanImageForQRCode = (\n    imageSource: CanvasImageSource,\n    width: number,\n    height: number\n  ): boolean => {\n    if (canvasCtx) {\n      canvas.height = height;\n      canvas.width = width;\n\n      canvasCtx.drawImage(imageSource, 0, 0, width, height);\n      const imageData = canvasCtx.getImageData(0, 0, width, height);\n      try {\n        const code = jsQR(imageData.data, imageData.width, imageData.height, {\n          inversionAttempts: \"dontInvert\",\n        });\n        if (code) {\n          setCode(code.data);\n\n          return true;\n        }\n      } catch (error) {\n        if (!(error instanceof RangeError)) throw error;\n      }\n    }\n    return false;\n  };\n\n  const scanVideoStreamForQRCode = (): void => {\n    if (code) {\n      return;\n    }\n    if (video && video.readyState === video.HAVE_ENOUGH_DATA) {\n      scanImageForQRCode(video, video.videoHeight, video.videoWidth);\n    }\n    scanVideoStreamForQRCodeTimeoutId = setTimeout(\n      scanVideoStreamForQRCode,\n      200\n    );\n  };\n\n  React.useEffect(() => {\n    let mediaStream: MediaStream;\n    if (videoRef.current) {\n      setVideo(videoRef.current);\n    }\n    if (video) {\n      navigator.mediaDevices\n        .getUserMedia({ video: { facingMode: \"environment\" } })\n        .then(function (stream) {\n          mediaStream = stream;\n\n          const [track] = mediaStream.getVideoTracks();\n\n          const capabilities =\n            track && track.getCapabilities && track.getCapabilities();\n\n          if (capabilities && capabilities.zoom) {\n            track &&\n              track.applyConstraints({\n                advanced: [{ zoom: capabilities.zoom.min }],\n              });\n          }\n\n          video.srcObject = mediaStream;\n\n          // required to tell iOS safari we don't want fullscreen\n          video.setAttribute(\"playsinline\", \"true\");\n          video.play();\n\n          scanVideoStreamForQRCodeTimeoutId = setTimeout(\n            scanVideoStreamForQRCode,\n            1000\n          );\n        })\n        .then(() => {\n          setShowScanImageButton(false);\n        });\n    }\n    const cleanup = (): void => {\n      // release webcam when it is no longer needed\n      mediaStream?.getTracks().forEach((t) => {\n        t.stop();\n      });\n      clearTimeout(scanVideoStreamForQRCodeTimeoutId);\n    };\n    return cleanup;\n  }, [video]);\n\n  const getQRFromBase64String = (base64EncodedImage: string): void => {\n    setError(\"\");\n    setCode(\"\");\n    setImg(base64EncodedImage);\n\n    const img = new Image();\n    img.onload = () => {\n      const foundQrCode = scanImageForQRCode(img, img.width, img.height);\n      if (!foundQrCode) {\n        setError(\n          \"Fant ikke QR kode i bilde. Prøv å holde mobilen litt lenger unna og ta et nytt bilde\"\n        );\n      }\n    };\n    img.src = base64EncodedImage;\n  };\n\n  return (\n    <div className=\"scanner\">\n      <video\n        className={`scanner__video ${\n          showScanImageButton ? \"scanner__video--hidden\" : \"\"\n        }`}\n        ref={videoRef}\n      ></video>\n      {img && <img className=\"scanner__image\" alt=\"Uploaded image\" src={img} />}\n      <div className=\"scanner__code\">{code}</div>\n\n      <div className=\"scanner__error\">{error}</div>\n      <div id=\"scanner__buttons\">\n        {showScanImageButton && (\n          <ResizeImageInput\n            label=\"Last opp bilde av QR code\"\n            onChange={getQRFromBase64String}\n            maxWidth={640}\n            maxHeight={480}\n            showImage={false}\n            buttonClassName=\"scanner__buttons__background\"\n          />\n        )}\n        {code && (\n          <button\n            className=\"scanner__buttons__background\"\n            onClick={() => onChange(code)}\n          >\n            Lagre\n          </button>\n        )}\n        <button\n          className=\"scanner__buttons__background\"\n          onClick={() => onChange(\"\")}\n        >\n          Avbryt\n        </button>\n      </div>\n    </div>\n  );\n};\n\ntype QRScannerProps = {\n  onChange: (code: string) => void;\n  label: string;\n};\nexport const QRScanner = ({ onChange, label }: QRScannerProps): JSX.Element => {\n  const [showQRScanner, setShowQRScanner] = useState(false);\n\n\n  return (\n    <div className=\"qr-scanner\">\n      <button\n        onClick={() => {\n          setShowQRScanner(true);\n        }}\n      >\n        {label}\n      </button>\n      {showQRScanner ? (\n        <Scanner\n          onChange={(code) => {\n            onChange(code);\n            setShowQRScanner(false);\n          }}\n        />\n      ) : null}\n    </div>\n  );\n};\n","import React, { useState } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport { QRScanner } from './qr-scanner';\n\nfunction App() {\n  const [value, setValue] = useState(\"\")\n   return (\n     <div className=\"App\">\n       <a href={value}>{value}</a>\n       \n       <QRScanner onChange={setValue} label=\"scan qr\" />\n     </div>\n   );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport * as Sentry from \"@sentry/react\";\nimport { Integrations } from \"@sentry/tracing\";\n\nSentry.init({\n  dsn:\n    \"https://175cda1b995144fca72721c4adf324bb@o556988.ingest.sentry.io/5688577\",\n  integrations: [new Integrations.BrowserTracing()],\n\n  // Set tracesSampleRate to 1.0 to capture 100%\n  // of transactions for performance monitoring.\n  // We recommend adjusting this value in production\n  tracesSampleRate: 1.0,\n});\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}