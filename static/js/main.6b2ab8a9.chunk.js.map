{"version":3,"sources":["qr-scanner/index.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Scanner","onChange","video","document","createElement","canvasRef","React","useRef","useState","context","setContext","tick","stream","current","readyState","HAVE_ENOUGH_DATA","height","videoHeight","width","videoWidth","drawImage","imageData","getImageData","code","jsQR","data","inversionAttempts","getTracks","forEach","t","stop","requestAnimationFrame","useEffect","renderCtx","getContext","navigator","mediaDevices","getUserMedia","facingMode","then","srcObject","setAttribute","play","className","ref","QRScanner","label","showQRScanner","setShowQRScanner","onClick","App","value","setValue","Error","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","Sentry","dsn","integrations","Integrations","BrowserTracing","tracesSampleRate","ReactDOM","render","StrictMode","getElementById"],"mappings":"8PAcMA,EAAU,SAAC,GAA6C,IAA3CC,EAA0C,EAA1CA,SACXC,EAAQC,SAASC,cAAc,SAE/BC,EAAYC,IAAMC,OAA0B,MAHS,EAK7BD,IAAME,SAClC,MANyD,mBAKpDC,EALoD,KAK3CC,EAL2C,KASrDC,EAAO,SAAPA,EAAQC,GACZ,GAAIP,EAAUQ,SAAWJ,GAAWP,EAAMY,aAAeZ,EAAMa,iBAAkB,CAC/EV,EAAUQ,QAAQG,OAASd,EAAMe,YACjCZ,EAAUQ,QAAQK,MAAQhB,EAAMiB,WAEhCV,EAAQW,UAAUlB,EAAO,EAAG,EAAGA,EAAMe,YAAaf,EAAMiB,YACxD,IAAME,EAAYZ,EAAQa,aAAa,EAAG,EAAGpB,EAAMe,YAAaf,EAAMiB,YAChEI,EAAOC,IAAKH,EAAUI,KAAMJ,EAAUH,MAAOG,EAAUL,OAAQ,CACnEU,kBAAmB,eAErB,GAAIH,EAMF,OALM,OAANX,QAAM,IAANA,KAAQe,YAAYC,SAAQ,SAACC,GAC3BA,EAAEC,eAEJ7B,EAASsB,EAAKE,MAKlBM,uBAAsB,kBAAMpB,EAAKC,OAsBnC,OAnBAN,IAAM0B,WAAU,WACd,GAAI3B,EAAUQ,QAAS,CACrB,IAAMoB,EAAY5B,EAAUQ,QAAQqB,WAAW,MAE3CD,GACFvB,EAAWuB,GAGXxB,GAEF0B,UAAUC,aAAaC,aAAa,CAAEnC,MAAO,CAAEoC,WAAY,iBAAmBC,MAAK,SAAU3B,GAC3FV,EAAMsC,UAAY5B,EAClBV,EAAMuC,aAAa,cAAe,QAClCvC,EAAMwC,OACNX,uBAAsB,kBAAMpB,EAAKC,WAGpC,CAACH,IAGF,qBAAKkC,UAAU,UAAf,SACE,wBAAQA,UAAU,kBAAkBC,IAAKvC,OASlCwC,EAAY,SAAC,GAAsD,IAApD5C,EAAmD,EAAnDA,SAAU6C,EAAyC,EAAzCA,MAAyC,EACnCtC,oBAAS,GAD0B,mBACtEuC,EADsE,KACvDC,EADuD,KAG7E,OACE,sBAAKL,UAAU,aAAf,UACE,wBAAQM,QAAS,kBAAMD,GAAiB,IAAxC,SAAgDF,IAC/CC,EACC,cAAC,EAAD,CACE9C,SAAU,SAACsB,GACTtB,EAASsB,GACTyB,GAAiB,MAGnB,SCvEKE,MAZf,WAAgB,IAAD,EACa1C,mBAAS,IADtB,mBACN2C,EADM,KACCC,EADD,KAEZ,OACE,sBAAKT,UAAU,MAAf,UACE,8BAAMQ,IACN,wBAAQF,QAAS,WACf,MAAM,IAAII,MAAM,SADlB,6BAFF,IAIE,cAAC,EAAD,CAAWpD,SAAUmD,EAAUN,MAAM,gBCE7BQ,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBjB,MAAK,YAAkD,IAA/CkB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,gBCDdO,IAAY,CACVC,IACE,4EACFC,aAAc,CAAC,IAAIC,IAAaC,gBAKhCC,iBAAkB,IAGpBC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFnE,SAASoE,eAAe,SAM1BjB,M","file":"static/js/main.6b2ab8a9.chunk.js","sourcesContent":["import jsQR from \"jsqr\"\nimport React, { useState } from \"react\"\nimport \"./index.css\"\n\n/*\nBased on https://github.com/cozmo/jsQR/blob/master/docs/index.html \nand https://betterprogramming.pub/add-an-html-canvas-into-your-react-app-176dab099a79\n\n*/\n\ntype ScannerProps = {\n  onChange: (code: string) => void\n}\n\nconst Scanner = ({ onChange }: ScannerProps): JSX.Element => {\n  const video = document.createElement(\"video\")\n\n  const canvasRef = React.useRef<HTMLCanvasElement>(null)\n\n  const [context, setContext] = React.useState<CanvasRenderingContext2D | null>(\n    null\n  );\n\n  const tick = (stream: MediaStream): void => {\n    if (canvasRef.current && context && video.readyState === video.HAVE_ENOUGH_DATA) {\n      canvasRef.current.height = video.videoHeight\n      canvasRef.current.width = video.videoWidth\n\n      context.drawImage(video, 0, 0, video.videoHeight, video.videoWidth)\n      const imageData = context.getImageData(0, 0, video.videoHeight, video.videoWidth)\n      const code = jsQR(imageData.data, imageData.width, imageData.height, {\n        inversionAttempts: \"dontInvert\"\n      })\n      if (code) {\n        stream?.getTracks().forEach((t) => {\n          t.stop();\n        });\n        onChange(code.data)\n        \n        return\n      }\n    }\n    requestAnimationFrame(() => tick(stream));\n  }\n\n  React.useEffect(() => {\n    if (canvasRef.current) {\n      const renderCtx = canvasRef.current.getContext(\"2d\")\n\n      if (renderCtx) {\n        setContext(renderCtx)\n      }\n    }\n    if (context) {\n      // Use facingMode: environment to attemt to get the front camera on phones\n      navigator.mediaDevices.getUserMedia({ video: { facingMode: \"environment\" } }).then(function (stream) {\n        video.srcObject = stream\n        video.setAttribute(\"playsinline\", \"true\") // required to tell iOS safari we don't want fullscreen\n        video.play()\n        requestAnimationFrame(() => tick(stream))\n      })\n    }\n  }, [context])\n\n  return (\n    <div className=\"scanner\">\n      <canvas className=\"scanner__canvas\" ref={canvasRef}></canvas>\n    </div>\n  )\n}\n\ntype QRScannerProps = {\n  onChange: (code: string) => void\n  label: string\n}\nexport const QRScanner = ({ onChange, label }: QRScannerProps): JSX.Element => {\n  const [showQRScanner, setShowQRScanner] = useState(false)\n\n  return (\n    <div className=\"qr-scanner\">\n      <button onClick={() => setShowQRScanner(true)}>{label}</button>\n      {showQRScanner ? (\n        <Scanner\n          onChange={(code) => {\n            onChange(code);\n            setShowQRScanner(false);\n          }}\n        />\n      ) : null}\n    </div>\n  );\n}\n","import React, { useState } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport { QRScanner } from './qr-scanner';\n\nfunction App() {\n  const [value, setValue] = useState(\"\")\n   return (\n     <div className=\"App\">\n       <div>{value}</div>\n       <button onClick={()=> {\n         throw new Error(\"derp\")}}>Break the world</button>;\n       <QRScanner onChange={setValue} label=\"scan qr\" />\n     </div>\n   );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport * as Sentry from \"@sentry/react\";\nimport { Integrations } from \"@sentry/tracing\";\n\nSentry.init({\n  dsn:\n    \"https://175cda1b995144fca72721c4adf324bb@o556988.ingest.sentry.io/5688577\",\n  integrations: [new Integrations.BrowserTracing()],\n\n  // Set tracesSampleRate to 1.0 to capture 100%\n  // of transactions for performance monitoring.\n  // We recommend adjusting this value in production\n  tracesSampleRate: 1.0,\n});\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}